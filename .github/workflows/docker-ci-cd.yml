name: Build and Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js (needed if Dockerfile uses npm commands)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # 3Ô∏è‚É£ Prepare SSH key
      - name: Prepare SSH key
        env:
          SSH_KEY: ${{ secrets.VPS_DEPLOY_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf "%s\n" "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # 4Ô∏è‚É£ Test SSH connection
      - name: Test SSH connection üîë
        run: |
          SSH_OPTS="-i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no"
          ssh $SSH_OPTS ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo '‚úÖ Connected to VPS successfully!'"

      # 5Ô∏è‚É£ Build and deploy Docker container on VPS
      - name: Deploy Docker container on VPS
        run: |
          SSH_OPTS="-i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no"
          ssh $SSH_OPTS ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            cd ${{ secrets.VPS_TARGET_DIR }}

            echo "üöÄ Building Docker image..."
            docker build -t next-admin-dashboard ./app

            echo "üõë Stopping old container if exists..."
            docker stop next-admin-dashboard || true
            docker rm next-admin-dashboard || true

            echo "‚ñ∂Ô∏è Running new container..."
            docker run -d -p 4000:3000 --name next-admin-dashboard next-admin-dashboard

            echo "‚úÖ Deployment completed!"
            docker ps -a
          EOF
